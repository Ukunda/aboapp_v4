import 'package:flutter/material.dart'; // For Color and IconData
import 'package:freezed_annotation/freezed_annotation.dart';

part 'subscription_entity.freezed.dart'; // Generated by Freezed

// Enums can be defined here or in a separate core/enums file if used across features
enum BillingCycle {
  weekly,
  monthly,
  quarterly,
  biAnnual, // Every 6 months
  yearly,
  custom, // For user-defined cycle (e.g., every X days/weeks/months)
}

enum SubscriptionCategory {
  streaming,
  software,
  gaming,
  fitness,
  music,
  news,
  cloud,
  utilities, // Example new category
  education, // Example new category
  other,
}

@freezed
class SubscriptionEntity with _$SubscriptionEntity {
  const SubscriptionEntity._(); // Private constructor for getters/methods

  const factory SubscriptionEntity({
    required String id,
    required String name,
    required double price, // Price for the specified billingCycle
    required BillingCycle billingCycle,
    required DateTime nextBillingDate,
    required SubscriptionCategory category,
    DateTime? startDate,
    String? description,
    String? logoUrl, // URL for remote logo
    Color? color,     // User-defined color for the subscription
    @Default(true) bool isActive,
    @Default(true) bool notificationsEnabled,
    @Default(7) int notificationDaysBefore,
    DateTime? trialEndDate,
    // For custom billing cycle, e.g., {'type': 'days', 'value': 45}
    Map<String, dynamic>? customCycleDetails, 
    String? notes, // Additional user notes
    // String? localLogoPath, // If you have local asset logos by path
  }) = _SubscriptionEntity;

  // Computed properties (Domain logic)
  bool get isInTrial {
    if (trialEndDate == null) return false;
    return DateTime.now().isBefore(trialEndDate!);
  }

  int get daysUntilBilling {
    final now = DateTime.now();
    final today = DateTime(now.year, now.month, now.day);
    final nextBillingDay = DateTime(nextBillingDate.year, nextBillingDate.month, nextBillingDate.day);
    return nextBillingDay.difference(today).inDays;
  }

  double get monthlyEquivalentPrice {
    // This logic needs to be robust and handle custom cycles if they exist
    switch (billingCycle) {
      case BillingCycle.weekly:
        return price * (365.25 / 12 / 7); // Avg weeks in month
      case BillingCycle.monthly:
        return price;
      case BillingCycle.quarterly:
        return price / 3.0;
      case BillingCycle.biAnnual:
        return price / 6.0;
      case BillingCycle.yearly:
        return price / 12.0;
      case BillingCycle.custom:
        // Example: if customCycleDetails = {'type': 'days', 'value': X}
        final days = customCycleDetails?['value'] as int?;
        if (days != null && days > 0) {
          return price * (30.4375 / days); // Average days in month / custom cycle days
        }
        return price; // Fallback if custom details are missing/invalid
      default:
        return price; // Fallback for any unhandled cycle
    }
  }

  // UI-related helpers (can also be in a separate utility or view model)
  String get categoryDisplayName {
    // This could be localized
    switch (category) {
      case SubscriptionCategory.streaming: return 'Streaming';
      case SubscriptionCategory.software: return 'Software';
      case SubscriptionCategory.gaming: return 'Gaming';
      // ... add all others
      case SubscriptionCategory.utilities: return 'Utilities';
      case SubscriptionCategory.education: return 'Education';
      default: return category.toString().split('.').last; // Fallback
    }
  }

  IconData get categoryDisplayIcon {
    switch (category) {
      case SubscriptionCategory.streaming: return Icons.live_tv_rounded;
      case SubscriptionCategory.software: return Icons.widgets_outlined;
      // ... add all others
      case SubscriptionCategory.utilities: return Icons.lightbulb_outline_rounded;
      case SubscriptionCategory.education: return Icons.school_outlined;
      default: return Icons.category_rounded;
    }
  }
}